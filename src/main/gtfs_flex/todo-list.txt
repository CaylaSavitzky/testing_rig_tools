okay so:



problem:
	this whole thing is a garbage mess of scripts
solution:
	- better self identifier for models
	- dao should take class and id and return val & accept obj and put into right location
		- would it make sense to have the dao handle making reciprocal relationships btwn relivant classes? tbh i don't think so, that feels wrong for access obj
	- there are too many situations where things other than objects are being passed around when it *really* should just be objects... <.< looking at you visualize_geo.py

problem:
	gross sidescreen image
solutions:
	1 -
		- add arrows for trips (directionality feature)
		- add tooltip or popup that start as on with traveltimes
		- maintain description as backup in associated txt?
	2 -
		- add a better way to float text
			-A modify the html after map is saved
			-B add plugin to package?
		- allow text scrolling
		- allow text to be dynamically sized
			or bare minimum have this be sized at creation to match the screen of the computer making the image ;.; pls not that. it's garbage solution. folium is mean.
	3 - 
		- make a new class based on: https://github.com/python-visualization/folium/blob/main/folium/plugins/float_image.py
		- make it a div, and make overflow: scroll an option
		- textbox or image inside or w/e

problem:
	stops are layered weirdly so they're hard to click on:
solution:
	- make getStopCenterListAndAddStopsToMap not add stops but just process info and make a list of stops
	- get max&min x and y of all locations (bounding box)
	- sort stops based on:
		- does one box cover the other by more than n percent but the covering relationship is not reciprocal
		- then relative size w/ a percentage
		- bottom right to top left (back up option for truely garbage data which does happen)
	- print stops

feature:
	multiple agencies that work by layers
		layer control element - confirm layers work
		id class for models which includes agency and object type
		read multiple files

feature:
	different maps for different days

feature:
	vectors btwn locations arrows