okay so:



problem:
	this whole thing is a garbage mess of scripts
solution:
	- dao should take class and id and return val & accept obj and put into right location
		- would it make sense to have the dao handle making reciprocal relationships btwn relivant classes? tbh i don't think so, that feels wrong for access obj
	- gtfsObjs shouldn't have other objs attatched but instead identifiers (maybe a list of identifiers)
	- dao should be able to consume a list of identifiers 
	- maybe dao should be able to consume objId and property and if tthe obj has that property/list it finds the list and saves that info for precomputed? not worth it actually, assume more cycles than memory
	- maybe non-identifiers are only be created by the dao obj, and then there's a good spot to raise exception if someone tries to make two of the same


problem:
	stops are layered weirdly so they're hard to click on:
solution:
	- make getStopCenterListAndAddStopsToMap not add stops but just process info and make a list of stops
	- get max&min x and y of all locations (bounding box)
	- sort stops based on:
		- does one box cover the other by more than n percent but the covering relationship is not reciprocal
		- then relative size w/ a percentage
		- bottom right to top left (back up option for truely garbage data which does happen)
	- print stops

problem:
	can't just click on the the map for latlon in many situations
solution:
	not sure this will work, but can i make a top layer that's empty to click on?

problem:
	doesn't handle a single gtfs with multiple agencies, or one gtfs referencing other agencies 
solution:
	minor fix in obj creation, but would be easier and better if first updated all obj creation methods to reference super and put that info there

feature:
	multiple agencies that work by layers
		layer control element - confirm layers work
		id class for models which includes agency and object type
		read multiple files

feature:
	different maps for different days

feature:
	vectors btwn locations arrows